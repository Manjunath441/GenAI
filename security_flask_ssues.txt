#file_name : security_flask_ssues.txt
from flask import Flask, request, jsonify, session
from werkzeug.security import generate_password_hash, check_password_hash
import logging
import os
import sqlite3
from cryptography.fernet import Fernet

app = Flask(__name__)
app.secret_key = os.urandom(24)

def get_db_connection():
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    return conn

def validate_input(data):
    if not data or not isinstance(data, str) or len(data) > 100:
        return False
    return True

key = Fernet.generate_key()
cipher_suite = Fernet(key)

@app.before_request
def before_request():
    if not request.is_secure:
        return jsonify({"error": "Secure connection required"}), 403

@app.route('/login', methods=['POST'])
def login():
    username = request.form['username']
    password = request.form['password']
    if not validate_input(username) or not validate_input(password):
        return jsonify({"error": "Invalid input"}), 400

    conn = get_db_connection()
    user = conn.execute('SELECT * FROM users WHERE username = ?', (username,)).fetchone()
    conn.close()

    if user and check_password_hash(user['password'], password):
        session['user_id'] = user['id']
        return jsonify({"message": "Login successful"}), 200
    return jsonify({"error": "Invalid credentials"}), 401

@app.errorhandler(404)
def page_not_found(e):
    return jsonify({"error": "Page not found"}), 404

API_KEY = os.getenv('API_KEY')

logging.basicConfig(filename='app.log', level=logging.INFO)

@app.route('/update', methods=['POST'])
def update():
    return jsonify({"message": "Update successful"}), 200

@app.route('/test', methods=['GET'])
def test():
    return jsonify({"message": "Security test passed"}), 200

if __name__ == '__main__':
    app.run(ssl_context='adhoc')
